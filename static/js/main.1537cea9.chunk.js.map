{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/scroll.js","components/Searchbox.js","components/Errorboundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","Cardlist","robots","cardlist","map","user","i","key","username","scroll","props","style","overflowY","border","height","children","Searcbox","searchchange","type","placeholder","onChange","Errorboundary","state","haserror","error","info","this","setState","Component","App","onsearchchange","event","searchfield","target","value","fetch","then","Response","json","robotfiltered","filter","toLowerCase","includes","length","Searchbox","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCJSC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,8BAAUC,UAAU,uDAChB,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,MCWLK,EAhBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAWD,EAAOE,KAAI,SAACC,EAAMC,GAC/B,OACA,kBAAC,EAAD,CAAMC,IAAKD,EACXT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGE,SAChBZ,MAAOM,EAAOI,GAAGV,WAGrB,OACI,kBAAC,WAAD,KACKO,ICFEM,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAC5DJ,EAAMK,WCUJC,EAbE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACf,OACI,yBAAKnB,UAAU,OACX,2BACAoB,KAAK,QACLC,YAAY,gBACZrB,UAAU,mCACVsB,SAAUH,MCWPI,E,kDAjBX,WAAYX,GAAO,IAAD,8BACd,gBACKY,MAAQ,CACTC,UAAS,GAHC,E,8DAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAOG,KAAKJ,MAAMC,SACd,0DACAG,KAAKhB,MAAMK,a,GAbMa,aC2CdC,G,wDArCX,aAAc,IAAD,8BACT,gBAWJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAXzC,EAAKZ,MAAQ,CACTpB,OAAO,GACP8B,YAAY,IAJP,E,gEAOO,IAAD,OACfG,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA/B,GAAI,OAAG,EAAKsB,SAAS,CAACzB,OAAOG,S,+BAK9B,IAAD,EAC0BqB,KAAKJ,MAA5BpB,EADH,EACGA,OAAQ8B,EADX,EACWA,YACTO,EAAgBrC,EAAOsC,QAAO,SAAAtC,GAChC,OAAOA,EAAOM,SAASiC,cAAcC,SAASV,EAAYS,kBAE9D,OAAIvC,EAAOyC,OAIP,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC8C,EAAD,CAAW3B,aAAgBS,KAAKI,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQqC,OARvB,wBAAIzC,UAAU,MAAd,e,GAtBD8B,c,MCAlBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.1537cea9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <fragment className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </fragment>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Fragment } from \"react\";\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) =>{\r\n    const cardlist = robots.map((user, i) =>{\r\n        return (\r\n        <Card key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].username} \r\n        email={robots[i].email} />\r\n        )\r\n    })\r\n    return (\r\n        <Fragment>\r\n            {cardlist}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from \"react\";\r\n\r\nconst scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'1px solid black', height:'500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default scroll;","import React from \"react\";\r\n\r\nconst Searcbox = ({searchchange}) =>{\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            type=\"searc\" \r\n            placeholder=\"search robots\" \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            onChange={searchchange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searcbox;","import React, {Component} from \"react\";\r\n\r\nclass  Errorboundary extends Component{\r\n    constructor(props){\r\n        super()\r\n        this.state = {\r\n            haserror:false\r\n        }\r\n    }\r\n    componentDidCatch(error, info){\r\n        this.setState({haserror:true})\r\n    }\r\n    render(){\r\n        return this.state.haserror ?\r\n            <h1>oopps something went wrong</h1> :\r\n            this.props.children\r\n        \r\n    }\r\n}\r\n\r\nexport default Errorboundary;","import React, { Component } from \"react\";\r\nimport Cardlist from \"../components/Cardlist\";\r\nimport Scroll from \"../components/scroll\";\r\nimport Searchbox from \"../components/Searchbox\"\r\nimport Errorboundary from \"../components/Errorboundary\"\r\nimport \"./app.css\"\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfield:\"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(Response => Response.json())\r\n        .then(user =>this.setState({robots:user}))\r\n    }\r\n    onsearchchange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const robotfiltered = robots.filter(robots => {\r\n            return robots.username.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if(!robots.length){\r\n            return <h1 className=\"tc\">Loading</h1>\r\n        }\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f2\">RoboFriends</h1>\r\n                <Searchbox searchchange = {this.onsearchchange}/>\r\n                <Scroll>\r\n                    <Errorboundary>\r\n                        <Cardlist robots={robotfiltered}/>\r\n                    </Errorboundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\"\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}